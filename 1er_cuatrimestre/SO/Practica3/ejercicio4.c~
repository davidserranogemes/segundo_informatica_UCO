#include <pthread.h> 
#include <unistd.h> 
#include <stdio.h> 
#include <stdlib.h>
#include <string.h>

struct AUX{

	char nombreFichero[30];
	int indice;
};

int END=0;
char BUFFER[1024];
pthread_mutex_t mtx=PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t cond=PTHREAD_COND_INITIALIZER;

void * leeFichero(void * parametros){//Escribe en el BUFFER

FILE * f;
struct AUX *aux1;

	aux1= (struct AUX *) parametros;

	if((f=fopen(aux1->nombreFichero,"r"))==NULL){
		printf("El fichero no existe, introduzca un fichero real.\n");
		exit(EXIT_FAILURE);
		}
	while(!feof(f)){
		pthread_mutex_lock(&mtx);
		pthread_cond_wait(&cond,&mtx);
		fgets(BUFFER,1024,f);
		printf("Se ha leido una linea del fichero y se ha copiado en el BUFFER.\n");
		pthread_mutex_unlock(&mtx);
		pthread_cond_signal(&cond);
		
}
	pthread_mutex_lock(&mtx);
	END=1;
	pthread_mutex_unlock(&mtx);
	printf("FIN del fichero");
	pthread_exit(NULL);
}


void *escribeFichero(void * parametros){//Lee del BUFFER

FILE *f;
struct AUX *aux1;
struct AUX aux
char ind[5];
	aux1= (struct AUX *) parametros;
	aux.indice=aux1->indice;
	aux.nombreFichero//COPIAR AQUI EL CONTENIDO D PARAM	
	sprintf(ind, "%i", aux->indice);
	printf("PRE_COPIA      Soy el fichero %s y mi nombre sera %s\n",ind, aux->nombreFichero); 
	strcat(aux->nombreFichero,ind);
	printf("Soy el fichero %s y mi nombre sera %s\n",ind, aux->nombreFichero); 
	if((f=fopen(aux->nombreFichero,"w"))==NULL){
		printf("ERROR en la creacion del fichero");
	}
	while(1){
	pthread_mutex_lock(&mtx);
	pthread_cond_wait(&cond,&mtx);
	
	if(END){
		printf("Se ha terminado a copia del fichero %d", aux->indice);
		pthread_mutex_unlock(&mtx);
		break;
	}else{
		fputs(BUFFER,f);
		printf("Se ha copiado una linea del codigo en el fichero numero %i.\n",aux->indice);
		pthread_cond_signal(&cond);
		pthread_mutex_unlock(&mtx);
		
	}
}
}
	
main(int argc, char **argv){

	if(argc!=3){
		printf("Syntax ERROR. Expected: ./program_name file_name numer_of_copies.\n");
		exit(EXIT_FAILURE);
		}

	pthread_t *writer;
	pthread_t reader;

	int i, numFiles;
	
	struct AUX param;
		param.indice=0;
		strcpy(param.nombreFichero, argv[1]);

	numFiles=atoi(argv[2]);
	writer=malloc(numFiles*sizeof(pthread_t));

		pthread_create(&reader,NULL,leeFichero, &param);

		for(i=0;i<numFiles;i++){
			param.indice=i;
			pthread_create(&writer[i],NULL,escribeFichero, &param);
			printf("\nSe ha creado el hilo escritor %i con nombre %s\n",param.indice,param.nombreFichero);
			//usleep(50000);
		}


		pthread_join(reader,NULL);
		
		for(i=0;i<numFiles;i++){
			pthread_join(writer[i],NULL);
		}	

}


























